% Program to prove a theorem in propositional calculus using resolution
% (based on Ivan Bratko. Prolog, programming for AI, 2nd Ed.)
%
% by Jomi Fred Hubner
% USP/PhD
% Course: Classical Logical
%
% april 1999
%
% to run with SWI-Prolog
%    swipl -g r8 -f resolution.pl

:- initialization(consult('patternProgramming.pl')).
:- initialization(consult('transform.pl')).

% tests for the program

r1 :- theorem( (a v ~a)).
r2 :- theorem( ((a->b) & (b ->c) -> (a->c)) ).
r3 :- theorem( ( (a -> b) v (~a) )).
r4 :- theorem( ( (a -> (b -> c)) -> ((a -> b) -> (a -> c))) ).
r5 :- theorem( ((a & b) -> (a v c)) ).
r6 :- theorem( ((a -> b) -> (a <-> b))  ).
r7 :- theorem( ((a & b) -> (a <-> b))  ).

r8 :- theorem( ((~p v ~q v r) & (~p v s) & (~q v s) & p & q) -> r ).

rDet :- theorem( ((~s -> p) & (~(r <-> ~p)) & ~s) -> p ).
rAdv :- theorem( (c -> g) & ~(~g <-> j) & (~o -> ~j) & (o -> (g & m)) & ~m -> ~c).

prove(Hyp) :-
  findall(SF, db(SF), L),
  makeConjunction(L,CF),
  theorem((CF -> Hyp)).

makeConjunction([F], F).
makeConjunction([F1|T], F1 & FT) :-
  makeConjunction(T,FT).


theorem(F) :-
   limpaTex, limpaShortTable,
   nl,nl,
   write('------------------------------'),nl,
   write('Starting resolution for '),
   writeWff(F), nl,nl,
   write('Negation '),
   writeWff(~F), nl,
   resolution(~F),
   nl, write('Thus '), writeWff(F),
   (clause(_,'{}',_,_),
    write(' is a theorem.'),nl,nl,
    write('Prove:'),nl,
    writeClauses;
    write(' is not a theorem.')),
   nl.

resolution(F) :-
   remAllClauses,
   remLastNumber,
   assert(lastNumber(0)),

   translate(F, L, _),
   write('Clausal form: '), 
   writeSeqClauses(L,' & '),nl,nl,
   addDB(L),
   write('Resolution process:'),nl,
   run.


%---------------------------------------------------------
%
%   Patterns
%
%   the rules are written in the following format:
%   [pre-condition pattern] ---> [actions to be executed]
%
%---------------------------------------------------------

% contradiction clauses
%
[clause(N1,X,_,_), clause(N2,~X,_,_)]
   ---> [addClause('{}',(N1,N2), contradiction),
         writeTrace(X,~X,'{}',contradiction),
         stop].

% remove tautologies (ex.: a v b v ~a)
%
[clause(_,C,_,_), in(P,C), in(~P,C)]
   ---> [retract(clause(_,C,_,_)),
         writeWff(C), write(' is removed because it''s a tautology'),nl].

% remove pure literal
%
[clause(_,C1,_,_), in(P,C1), atomic(P),
 \+ clauseWith(~P)]
   ---> [retract(clause(_,C1,_,_)),
         writeWff(C1), write(' is removed because it contains a pure literal '),
         write(P),nl].


% simplify a clause (ex.: a v b v a ---> a v b)
%
[clause(_,C,F,B), orDelete(P,C,C1), in(P,C1), \+ clause(_,C1,_,_)]
   ---> [retract(clause(_,C,_,_)),
         addClause(C1,F,B),
         writeTrace(C,itself,C1,simplification)].

% if the simplification already exist, only retrac it
%
[clause(_,C,_,_), orDelete(P,C,C1), in(P,C1), clause(_,C1,_,_)]
   ---> [retract(clause(_,C,_,_)),
         writeWff(C),write(' is removed because its simplification already is in database'),nl].

% resolution step, special case
%
[clause(N1,P,_,_), clause(N2,C,_,_), orDelete(~P,C,C1),
 \+ clause(_,C1,_,_), \+ exists(done(P,C,P))]
    ---> [addClause(C1,(N1,N2),resolution),assert(done(P,C,P)),
          writeTrace(P,C,C1,resolutionSpecialCase1)].

[clause(N1,~P,_,_), clause(N2,C,_,_), orDelete(P,C,C1),
 \+ clause(_,C1,_,_), \+ exists(done(~P,C,P))]
   ---> [addClause(C1,(N1,N2),resolution), assert(done(~P,C,P)),
         writeTrace(~P,C,C1,resolutionSpecialCase2)].


% resolution step, general case
%
[clause(N1,C1,_,_), orDelete(P,C1,CA),
 clause(N2,C2,_,_), orDelete(~P,C2,CB),
 \+ clause(_,CA v CB,_,_), \+ exists(done(C1,C2,P))]
   ---> [addClause(CA v CB,(N1,N2),resolution), assert(done(C1,C2,P)),
         writeTrace(C1,C2,CA v CB,resolutionGeneralCase)].


% last rule, no other rule could be applied
%
[]
   ---> [write('No contradiction found'), nl, stop].



%
% Auxiliary predicates
%
clauseWith(P) :- clause(_,C,_,_), in(P,C).


orDelete(X, X v Y, Y).
orDelete(X, Y v X, Y).
orDelete(X, Y v Z, Y v Z1) :- orDelete(X,Z,Z1).
orDelete(X, Y v Z, Y1 v Z) :- orDelete(X,Y,Y1).

in(X,X).
in(X,Y) :- orDelete(X, Y, _).


writeTrace(C1,C2,CF,Rule) :-
   write('from {'), writeWff(C1),
   write('} and {'),writeWff(C2), write('} '),
   write('we get {'), writeWff(CF), write('} '),
   write('by '), write(Rule),nl.

writeClauses :-
   clause(N,C,From,By),
   %write(N), write('. '), writeWff(C),
   %write('    '), write(From),
   %write(' by '), write(By),nl,
   writef('%3R. %15L %w - %w', [N, C, From, By]),nl,
   fail.
writeClauses.


exists(P) :- retract(P), assert(P).

addDB([]).
addDB([C|R]) :- addClause(C,hyp,database), addDB(R).

remAllClauses :- retract(clause(_,_,_,_)), fail.
remAllClauses.

remLastNumber :- retract(lastNumber(_)), fail.
remLastNumber.


addClause(C,From,By) :-
   retract(lastNumber(N)),
   N1 is N + 1,
   assert(lastNumber(N1)),
   assert(clause(N1,C,From,By)).
